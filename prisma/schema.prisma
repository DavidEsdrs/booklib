// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int      @id @default(autoincrement())
  username        String   @db.VarChar(30)
  email           String   @unique @db.VarChar(50)
  password        String   @db.VarChar(100)
  bio             String?  @db.VarChar(255)
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @default(now()) @map("updated_at")
  pictureFilePath String?  @map("picture_file_path") @db.VarChar(30)

  uploads   Book[]
  libraries Library[]
  roles     Role[]
  reviews   Review[]

  @@map("users")
}

model Role {
  id     Int      @id @default(autoincrement())
  type   RoleType
  userId Int
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("roles")
}

enum RoleType {
  ROOT
  ADMIN
  REGULAR
}

model Book {
  id            Int        @id @default(autoincrement())
  title         String     @db.VarChar(255)
  synopsis      String     @db.VarChar(255)
  notes         String?    @db.VarChar(10000)
  filePath      String     @map("file_path") @db.VarChar(30)
  coverFilePath String     @map("cover_file_path") @db.VarChar(30)
  pages         Int        @db.Int()
  visibility    Visibility @default(PRIVATE)
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @default(now()) @map("updated_at")

  genders Gender[]

  uploadedById Int
  uploadedBy   User @relation(fields: [uploadedById], references: [id], onDelete: Cascade, onUpdate: Cascade)

  libraries BooksOnLibraries[]

  reviews Review[]

  @@map("books")
}

model BooksOnLibraries {
  bookId    Int @map("book_id")
  libraryId Int @map("library_id")

  book    Book    @relation(fields: [bookId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  library Library @relation(fields: [libraryId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  assignedAt DateTime @default(now()) @map("assigned_at")

  @@id([bookId, libraryId])
  @@map("books_on_libraries")
}

model Library {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(50)
  description String?    @db.VarChar(255)
  visibility  Visibility @default(PRIVATE)

  createdById Int  @map("created_by_id")
  createdBy   User @relation(fields: [createdById], references: [id], onDelete: Cascade, onUpdate: Cascade)

  books BooksOnLibraries[]

  @@map("libraries")
}

enum Visibility {
  PUBLIC
  PRIVATE
}

model Gender {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(15)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  books Book[]

  @@map("genders")
}

model Review {
  id      Int    @id @default(autoincrement())
  content String @db.VarChar(10000)
  rating  Int    @db.Int()
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  bookId Int
  book   Book @relation(fields: [bookId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("reviews")
}
